{"version":3,"sources":["circularProgressivebar/circularProgressivebar.js","doughnutchart/doughnutchart.js","App.js","serviceWorker.js","index.js"],"names":["CircularProgressivebar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bar","strokeDashoffset","rangeChange","bind","assertThisInitialized","e","dashoffset","Math","PI","target","value","console","log","setState","react_default","a","createElement","id","data-pct","width","height","viewport","version","xmlns","r","cx","cy","fill","strokeDasharray","type","min","max","onChange","React","Component","DoughnutChart","cirvalu","dashoffsets","displayValue","newobj","name","CIRCUMFERENCE","progress","onClick","onMouseMove","stroke-width","stroke","val3","second","first","App","className","circularProgressivebar_circularProgressivebar","doughnutchart_doughnutchart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a761c81.chunk.js","sourcesContent":["import React from 'react'\nimport './circularProgressivebar.css'\n\n\nclass CircularProgressivebar extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      bar: 100,\n      strokeDashoffset: 0\n    }\n    this.rangeChange = this.rangeChange.bind(this)\n  }\n  rangeChange(e){\n    var RADIUS = 90;\n    var CIRCUMFERENCE = 2 * Math.PI * RADIUS;\n    var progress = e.target.value / 100;\n    var dashoffset = CIRCUMFERENCE * (1 - progress);\n    console.log(dashoffset);\n    this.setState({bar: e.target.value, strokeDashoffset:  dashoffset})\n  }\n\n\nrender(){\n  console.log(this.state);\n  return( <div >\n    <div id=\"cont\" data-pct=\"100\">\n        <div id=\"progress-val\"> {this.state.bar} %</div>\n      <svg id=\"svg\" width=\"200\" height=\"200\" viewport=\"0 0 100 100\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n\n        <circle id=\"bar2\" r=\"90\" cx=\"100\" cy=\"100\" fill=\"transparent\" strokeDasharray =\"565.48\" strokeDashoffset={this.state.strokeDashoffset}></circle>\n        <circle id=\"bar\" r=\"90\" cx=\"100\" cy=\"100\" fill=\"transparent\" strokeDasharray=\"565.48\" strokeDashoffset={this.state.strokeDashoffset}></circle>\n      </svg>\n    </div>\n\n    <input type=\"range\" min=\"0\" max = \"100\" value={this.state.bar} onChange={this.rangeChange}/>\n\n  </div>)\n}\n\n}\n\nexport default CircularProgressivebar\n","import React from 'react'\nimport './doughnutchart.css'\n\n\nclass DoughnutChart extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      bar: 100,\n      strokeDashoffset: 0,\n      cirvalu: {},\n      dashoffsets: [141.3716694115407, 339.29200658769764,0]\n    }\n    this.rangeChange = this.rangeChange.bind(this)\n    this.displayValue = this.displayValue.bind(this)\n  }\n  rangeChange(e){\n    let newobj = this.state.cirvalu\n    newobj[e.target.name] = e.target.value\n\n    var RADIUS = 90;\n    var CIRCUMFERENCE = 2 * Math.PI * RADIUS;\n    console.log(CIRCUMFERENCE);\n\n    let dashoffsets = this.state.dashoffsets;\n    if(e.target.name === 'first'){\n      let progress = e.target.value / 100;\n      console.log(progress);\n      dashoffsets[0] = CIRCUMFERENCE * (progress);\n    }\n    if(e.target.name === 'second'){\n      let progress = e.target.value / 100;\n        console.log(progress);\n      dashoffsets[1] = dashoffsets[0] + (CIRCUMFERENCE * progress);\n    }\n    if(e.target.name === 'third'){\n      let progress = e.target.value / 100;\n        console.log(progress);\n      dashoffsets[2] = dashoffsets[1] + (CIRCUMFERENCE * progress);\n    }\n\n    this.setState({cirvalu: newobj, dashoffsets:  dashoffsets})\n  }\n\n  displayValue(e){\n\n    if(e.target.id === \"first\" ){\n      this.setState({bar: 25})\n    }\n    if(e.target.id === \"second\" ){\n      this.setState({bar: 35})\n    }\n    if(e.target.id === \"third\" ){\n      this.setState({bar: 40})\n    }\n\n  }\n\nrender(){\n\n  return( <div >\n    <div id=\"cont1\" data-pct=\"100\">\n      <div id=\"progress-val\"> {this.state.bar} %</div>\n      <svg onClick={this.displayValue} id=\"svg1\" width=\"300\" height=\"300\" viewport=\"50 50 150 150\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n          <circle cx=\"150\" cy=\"150\" r=\"90\"   fill=\"transparent\" />\n          <circle  cx=\"150\" cy=\"150\" r=\"90\" fill=\"transparent\"  onMouseMove={this.displayValue} id=\"first\"  stroke-width=\"15%\" stroke=\"grey\"/>\n          <circle cx=\"150\" cy=\"150\" r=\"90\"  onMouseMove={this.displayValue}   id=\"second\" val3={this.state.second} fill=\"transparent\" stroke-width=\"16%\" stroke=\"#00CCFF\" strokeDasharray=\"565.48\" strokeDashoffset={this.state.dashoffsets[0]}/>\n          <circle cx=\"150\" cy=\"150\" r=\"90\"  onMouseMove={this.displayValue} id=\"third\" fill=\"transparent\" stroke-width=\"17%\" stroke=\"#ce4b99\" strokeDasharray=\"565.48\" strokeDashoffset= {this.state.dashoffsets[1]}/>\n\n      </svg>\n    </div>\n\n\n    <input type=\"text\"  name=\"first\" value={this.state.first} onChange={this.rangeChange}/>\n    <input type=\"text\"  name=\"second\" value={this.state.second} onChange={this.rangeChange}/>\n\n  </div>)\n}\n}\n\nexport default DoughnutChart\n","import React from 'react';\nimport CircularProgressivebar from './circularProgressivebar/circularProgressivebar';\nimport DoughnutChart from './doughnutchart/doughnutchart'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n            <CircularProgressivebar />\n      </header>\n      <header className=\"App-header\">\n            <DoughnutChart />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}